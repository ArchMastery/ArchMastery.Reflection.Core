name: CICD

on:
  release:
  workflow_dispatch:

jobs:
  build:
    env:
      event_name: ${{ github.event_name }}

    runs-on: ubuntu-latest

    steps:
    - uses: haya14busa/action-cond@v1
      id: configuration
      with:
        cond: ${{ github.event_name == 'release' }}
        if_true: 'Release'
        if_false: 'Debug'

    - shell: pwsh
      env:
        configuration: ${{ steps.configuration.outputs.value }}
      run: |
        Write-Host "`${env:event_name}: [${env:event_name}]"
        Write-Host "`${env:configuration}: [${env:configuration}]"
    
    - name: Checkout
      uses: actions/checkout@v1
      
    - name: Setup .NET
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: 5.0.x
    - name: Setup .NET
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: 6.0.x
        
    - name: GitHub Action to Setup GitVersion
      uses: sharpninja/setup-gitversion@master
      with:
        run-gitversion: true
        gitversion-version: 5.10.3
        run-gitversion-args: '{ "cwd": "${{ github.workspace }}" }'
        
    - name: Restore dependencies
      env:
        configuration: ${{ steps.configuration.outputs.value }}
      run: dotnet restore

    - name: Build
      env:
        configuration: ${{ steps.configuration.outputs.value }}
      shell: pwsh
      run: |
        dotnet build -c ${env:configuration} --no-restore 
        dotnet test -c ${env:configuration} --no-build
        dotnet pack -c ${env:configuration} --no-build --include-symbols --include-source
        $packages = gci *.symbols.nupkg -Recurse -ErrorAction Stop
        New-Item ./artifacts -ItemType Directory
        $packages | move-item -Destination ./artifacts/
        
    - name: Upload a Build Artifact
      uses: actions/upload-artifact@v3.1.0
      with:
        path: ./artifacts
        retention-days: 7
        
    - name: Publish
      env:
        configuration: ${{ steps.configuration.outputs.value }}
      shell: pwsh
      if: ${{ steps.configuration.outputs.value == 'Release' }}
      run: | 
        $packages = gci *.symbols.nupkg -Path ./artifacts/

        echo "Length: ${packages.Length}"
        
        $packages | forEach-Object -process {
          $path = $_.FullName;
          echo "FullName: [$path]"
          echo "dotnet nuget push $path -k `"${{ secrets.NUGET_TOKEN }}`" -s `"https://api.nuget.org/v3/index.json`" --skip-duplicate"
          $result = dotnet nuget push $path -k "${{ secrets.NUGET_TOKEN }}" -s "https://api.nuget.org/v3/index.json" --skip-duplicate
          if($LASTEXITCODE -ne 0) { throw $result }
          echo $result
        }
